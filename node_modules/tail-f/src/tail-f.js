var fs = require('fs');
var EventEmitter = require('events').EventEmitter;

/**
 * watch file and emmit 'change' status when the file size is increased
 * @param {string} filePath - path to file
 * @constructor
 */
function TailObservable() {
    var args = Array.prototype.slice.call(arguments);
    args.forEach(function (arg) {
        this.registerFile(arg);
    }.bind(this));
}


TailObservable.prototype = Object.create(EventEmitter.prototype);

/**
 * get modified data and split lines in an array
 * @param data
 * @returns {Array.<string>}
 */
TailObservable.prototype.getLines = function (data) {
    data = data.replace(/\r/g, '').split('\n');
    data = data.filter(function (line) {
        return !!line.trim();
    });

    return data;
};

/**
 * register file watch
 * @param {string} filePath
 */
TailObservable.prototype.registerFile = function (filePath) {
    var fileSize = fs.statSync(filePath).size;

    fs.watchFile(filePath, function (current, previous) {
        if (current.mtime <= previous.mtime) {
            return;
        }

        var currentSize = fs.statSync(filePath).size;
        var sizeDiff = currentSize - fileSize;

        if (sizeDiff < 0) {
            fileSize = fs.statSync(filePath).size;
            return;
        }

        var buffer = new Buffer(sizeDiff);
        var fileDescriptor = fs.openSync(filePath, 'r');

        fs.readSync(fileDescriptor, buffer, 0, sizeDiff, fileSize);
        fs.closeSync(fileDescriptor);
        fileSize = currentSize;

        var lines = this.getLines(buffer.toString());
        this.emit('change', lines);
    }.bind(this));
};

module.exports = TailObservable;
