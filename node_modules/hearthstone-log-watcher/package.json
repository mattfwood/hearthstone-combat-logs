{
  "_args": [
    [
      {
        "raw": "hearthstone-log-watcher@^3.0.1",
        "scope": null,
        "escapedName": "hearthstone-log-watcher",
        "name": "hearthstone-log-watcher",
        "rawSpec": "^3.0.1",
        "spec": ">=3.0.1 <4.0.0",
        "type": "range"
      },
      "C:\\Users\\Matt\\Documents\\hearthstone-combat-logs"
    ]
  ],
  "_from": "hearthstone-log-watcher@>=3.0.1 <4.0.0",
  "_id": "hearthstone-log-watcher@3.0.1",
  "_inCache": true,
  "_location": "/hearthstone-log-watcher",
  "_nodeVersion": "3.0.0",
  "_npmUser": {
    "name": "chevex",
    "email": "alex.ford@codetunnel.com"
  },
  "_npmVersion": "2.13.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "hearthstone-log-watcher@^3.0.1",
    "scope": null,
    "escapedName": "hearthstone-log-watcher",
    "name": "hearthstone-log-watcher",
    "rawSpec": "^3.0.1",
    "spec": ">=3.0.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/hearthstone-log-watcher/-/hearthstone-log-watcher-3.0.1.tgz",
  "_shasum": "00e099b9652df577a15c1417247fb0a82d552d11",
  "_shrinkwrap": null,
  "_spec": "hearthstone-log-watcher@^3.0.1",
  "_where": "C:\\Users\\Matt\\Documents\\hearthstone-combat-logs",
  "author": {
    "name": "Chevex"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "extend": "^3.0.0"
  },
  "description": "This simple module monitors the Hearthstone log file and emits events based on important events from the log.",
  "devDependencies": {
    "chai": "^3.2.0",
    "mocha": "^2.2.5"
  },
  "directories": {},
  "dist": {
    "shasum": "00e099b9652df577a15c1417247fb0a82d552d11",
    "tarball": "https://registry.npmjs.org/hearthstone-log-watcher/-/hearthstone-log-watcher-3.0.1.tgz"
  },
  "gitHead": "e4273b1affab9edfedcb9e5e031e0bcc49cf8dda",
  "keywords": [
    "hearthstone",
    "deck tracker"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "chevex",
      "email": "alex.ford@codetunnel.com"
    }
  ],
  "name": "hearthstone-log-watcher",
  "optionalDependencies": {},
  "readme": "# Hearthstone Log Watcher\n\nThis module is simple. It takes care of the low-level monitoring of the Hearthstone log file and emits events based on what happens in the log file. Use this module if you want to build your own Hearthstone deck tracker and don't want to do the work of parsing through the nasty log file yourself.\n\n## Usage\n\n> $ npm install hearthstone-log-watcher\n\n```javascript\nvar LogWatcher = require('hearthstone-log-watcher');\nvar logWatcher = new LogWatcher();\n\nlogWatcher.on('zone-change', function (data) {\n  console.log(data.cardName + ' has moved from ' + data.fromTeam + ' ' + data.fromZone + ' to ' + data.toTeam + ' ' + data.toZone);\n});\n\nlogWatcher.start();\n```\n\nHere's an example of the output from the above script:\n\n> Knife Juggler has moved from FRIENDLY DECK to FRIENDLY HAND\n\nHere's a little demo video as well:\n\n[![](http://i.imgur.com/tKtxS8L.png)](http://www.youtube.com/watch?v=ccXEcKrZxu4)\n\n### Parse an existing log file\n\n`logWatcher.start()` begins reading any updates to the Hearthstone log file that occur after it has begun watching. If you need to parse a log from the beginning, you can use `parseBuffer`.\n\n```javascript\nvar fs = require('fs');\n\nfs.readFile('./my-old-player-log.log', function(err, buffer) {\n  if (err) return console.error(err);\n  logWatcher.parseBuffer(buffer);\n});\n```\n\n## Methods\n\n### start()\n\nStarts watching the log file and parses any changes to it.\n\n### stop()\n\nStops the watcher.\n\n### parseBuffer(buffer [, parserState])\n\nParses a buffer (log file).\n\nUseful if you have log files that you want to parse without watching them. See the usage example above for how to get the buffer from existing files.\n\nThe second argument, `parserState`, is optional, and will be created for you if you omit it.\n\nIf you want to use your own `parserState` instance it must have these properties:\n\n* **players**: `Array` (keeps track of the players)\n* **playerCount**: `Number` (keeps track of when players enter the game to know when to emit the start event)\n* **gameOverCount**: `Number` (keeps track of when players won/lost/tied to know when the game is over)\n* **reset**: `Function` (resets the `parserState` instance at the end of a game)\n\n## Events\n\nThe available events you can listen for are as follows:\n\n### **game-start**\n\nThe `game-start` event fires at the beginning of a match when the watcher has gathered enough data from the log to determine which of the two players is the local player. It was a lot more complicated to figure that out than one might think, so this event is pretty valuable because it eliminates the guess work. Not even the hearthstats deck tracker can determine what player is the local player ;)\n\nCallback Arguments:\n\n- **players** - an array of the players in the game and what team they are on (friendly or opposing);\n\nExample player object:\n\n```javascript\n{\n  name: 'Hologrid',\n  id: 1,\n  team: 'FRIENDLY'\n}\n```\n\n### **game-over**\n\nThe `game-over` event fires at the end of a match and includes additional data showing who won and who lost.\n\nCallback Arguments:\n\n- **players** - the same array of players from the `game-start` event except the players have an additional status property.\n\nExample player object:\n\n```javascript\n{\n  name: 'Hologrid',\n  id: 1,\n  team: 'FRIENDLY',\n  status: 'WON'\n}\n```\n\n### **zone-change**\n\nThe `zone-change` event fires whenever a game entity moves from one zone to another. Most entities are cards, but heroes and hero powers are also considered game entities and will show up in these events as well. I'm working on a way to filter those out, but they don't cause any problems currently other than just being useless data most of the time.\n\nHearthstone has 8 zones (that I'm aware of):\n\n- DECK\n- HAND\n- PLAY\n- PLAY (Hero)\n- PLAY (Hero Power)\n- PLAY (Weapon)\n- SECRET\n- GRAVEYARD\n\nThe \"PLAY (Hero)\" and \"PLAY (Hero Power)\" zones are pretty useless to us because the heroes and hero powers go into their respective play zones at the beginning of the game and don't usually go to the GRAVEYARD zone until the game is over. There is one exception that I'm aware of and that is Jaraxxus. Jaraxxus sends the Gul'dan hero and the Life Tap hero power to the GRAVEYARD zone when he is played, and then the Jaraxxus entity himself and his INFERNO! hero power enter the respective play zones.\n\nThe other zones are pretty straightforward. Cards in your deck are in the DECK zone. Cards in your hand are in the HAND zone. Minions on the board are in the PLAY zone. Secrets and weapons are in the SECRET and PLAY (Weapon) zones respectively. When writing a deck tracker UI it usually makes the most sense to consider PLAY, SECRET, and PLAY (Weapon) as a single zone; that way you can show visually whether a card is in your deck, your hand, in play, or destroyed.\n\nThe `zone-change` event receives an object as an argument with data that describes the event. It contains the card name, the card ID, the entity ID for that match, the team and zone the card came from, and the team and zone the card is moving to.\n\nExample zone change data object:\n\n```javascript\n{\n  cardName: 'Knife Juggler',\n  cardId: 'NEW1_019',\n  entityId: 37,\n  fromTeam: 'OPPOSING',\n  fromZone: 'PLAY',\n  toTeam: 'OPPOSING',\n  toZone: 'GRAVEYARD'\n}\n```\n\nDon't be confused by the `entityId` field. The ID is not consistent across games. Rather, the entity ID is an identifier that is assigned to that specific card for the duration of just that match. It is what you need in order to track a card's status as the game progresses. For example, if you have two Knife Jugglers in your deck, you need to be able to tell which one is which. The entity ID is the only way to track changes to a specific card during that game. The `cardId` field never changes however, and you may use it to look up card data in a card database such as the one found at [HearthstoneJSON.com](http://hearthstonejson.com).\n\n## Planned\n\nRight now the log watcher only emits three events. The Hearthstone log contains A LOT of data and I believe there are a lot more events that this module *could* emit. For example, I believe there is enough data in the log to even track the damage/buff states of the minions in play. I'm going to experiment with the log more and see if I can pull out more useful data and provide useful events.\n\n## Frequently Asked Questions\n\n#### Q. How do I see all the cards in my deck?\n\nA. This module doesn't provide any functionality like that. This is just a log watcher that emits events that describe what it sees happening in the log. If you're building a deck tracker, you'll want to provide some kind of *deck builder* where users can fill out their deck beforehand. One helpful tool for this is [HearthstoneJSON.com](http://hearthstonejson.com/) where you can get a JSON blob of all the Hearthstone card data. You could use that JSON data to do a card name autocomplete input, making it super easy for users to build their deck in your tool.\n\n#### Q. Did you build a deck tracker that uses your own log watcher module?\n\nA. Why yes I did! You can find my Hearthpal Tracker [here](http://github.com/hearthpal/hearthpal-tracker).\n\n#### Q. Why do some events seem to happen out of order?\n\nA. This is not the fault of the log watcher. Hearthstone performs many things asynchronously even though the game appears to be very synchronous where things happen in a certain order. Unfortunately, Hearthstone does not always write to its own log file in the order in which things actually happened. For example, you may receive a game over event seconds before a card transition event, even if the transition occurred before the game ended. It's usually not a big deal but it's something to be aware of.\n",
  "readmeFilename": "README.md",
  "scripts": {
    "test": "mocha"
  },
  "version": "3.0.1"
}
